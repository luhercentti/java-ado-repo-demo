# Complete Azure DevOps CI/CD Pipeline for Java App
# Builds, containerizes, and deploys to Azure Container Apps

trigger:
  branches:
    include:
    - main
    - develop

variables:
  # Maven and Java settings
  - name: mavenPomFile
    value: 'pom.xml'
  - name: javaVersion
    value: '11'
  
  # Azure Container Registry settings
  - name: containerRegistry
    value: 'myappregistry.azurecr.io'
  - name: imageRepository
    value: 'java-simple-app'
  - name: dockerfilePath
    value: 'Dockerfile'
  
  # Azure Resource settings
  - name: azureSubscription
    value: 'Azure-lhc-tests-serviceconnection'
  - name: resourceGroupName
    value: 'rg-lhc-tests'
  - name: containerAppName
    value: 'java-app'
  - name: containerEnvironmentName
    value: 'java-app-env'
  
  # Dynamic variables
  - name: imageTag
    value: '$(Build.BuildId)'
  - name: imageName
    value: '$(containerRegistry)/$(imageRepository):$(imageTag)'

stages:
# ===== BUILD AND TEST STAGE =====
- stage: Build
  displayName: 'Build, Test & Containerize'
  jobs:
  - job: BuildAndTest
    displayName: 'Build Java App and Create Container'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    # Checkout code
    - checkout: self
      displayName: 'Checkout Repository'
    
    # Set up Java
    - task: JavaToolInstaller@0
      displayName: 'Install Java $(javaVersion)'
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    # Cache Maven dependencies
    - task: Cache@2
      displayName: 'Cache Maven Dependencies'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
      env:
        MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
    
    # Maven: Clean, compile, test, package
    - task: Maven@3
      displayName: 'Maven: Clean Compile Test Package'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'clean compile test package'
        options: '-B -DskipTests=false'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
    
    # Build Docker image
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'build'
        Dockerfile: '$(dockerfilePath)'
        tags: |
          $(imageTag)
          latest
    
    # Push Docker image to Azure Container Registry
    - task: Docker@2
      displayName: 'Push Image to ACR'
      inputs:
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageRepository)'
        command: 'push'
        tags: |
          $(imageTag)
          latest

# ===== DEPLOY TO DEVELOPMENT =====
- stage: Deploy_Development
  displayName: 'Deploy to Development'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Dev Environment'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    variables:
      - name: environmentSuffix
        value: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          # Install Azure CLI
          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container Apps - DEV'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Set variables
                RG_NAME="$(resourceGroupName)-$(environmentSuffix)"
                APP_NAME="$(containerAppName)-$(environmentSuffix)"
                ENV_NAME="$(containerEnvironmentName)-$(environmentSuffix)"
                IMAGE_NAME="$(imageName)"
                
                echo "Deploying to Development Environment..."
                echo "Resource Group: $RG_NAME"
                echo "Container App: $APP_NAME"
                echo "Image: $IMAGE_NAME"
                
                # Create resource group if it doesn't exist
                az group create --name $RG_NAME --location "East US"
                
                # Create Container Apps environment if it doesn't exist
                if ! az containerapp env show --name $ENV_NAME --resource-group $RG_NAME &> /dev/null; then
                  echo "Creating Container Apps environment..."
                  az containerapp env create \
                    --name $ENV_NAME \
                    --resource-group $RG_NAME \
                    --location "East US"
                fi
                
                # Deploy or update the container app
                if az containerapp show --name $APP_NAME --resource-group $RG_NAME &> /dev/null; then
                  echo "Updating existing container app..."
                  az containerapp update \
                    --name $APP_NAME \
                    --resource-group $RG_NAME \
                    --image $IMAGE_NAME
                else
                  echo "Creating new container app..."
                  az containerapp create \
                    --name $APP_NAME \
                    --resource-group $RG_NAME \
                    --environment $ENV_NAME \
                    --image $IMAGE_NAME \
                    --target-port 8080 \
                    --ingress external \
                    --cpu 0.25 \
                    --memory 0.5Gi \
                    --min-replicas 1 \
                    --max-replicas 3 \
                    --env-vars "ENVIRONMENT=development"
                fi
                
                # Get the application URL
                APP_URL=$(az containerapp show --name $APP_NAME --resource-group $RG_NAME --query "properties.configuration.ingress.fqdn" -o tsv)
                echo "##vso[task.setvariable variable=appUrl]https://$APP_URL"
                echo "Application deployed successfully!"
                echo "DEV URL: https://$APP_URL"

# # ===== DEPLOY TO PRODUCTION =====
# - stage: Deploy_Production
#   displayName: 'Deploy to Production'
#   dependsOn: Build
#   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
#   jobs:
#   - deployment: DeployToProd
#     displayName: 'Deploy to Production Environment'
#     pool:
#       vmImage: 'ubuntu-latest'
#     environment: 'production'
#     variables:
#       - name: environmentSuffix
#         value: 'prod'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           # Production deployment with more robust configuration
#           - task: AzureCLI@2
#             displayName: 'Deploy to Azure Container Apps - PRODUCTION'
#             inputs:
#               azureSubscription: '$(azureSubscription)'
#               scriptType: 'bash'
#               scriptLocation: 'inlineScript'
#               inlineScript: |
#                 # Set variables
#                 RG_NAME="$(resourceGroupName)-$(environmentSuffix)"
#                 APP_NAME="$(containerAppName)-$(environmentSuffix)"
#                 ENV_NAME="$(containerEnvironmentName)-$(environmentSuffix)"
#                 IMAGE_NAME="$(imageName)"
                
#                 echo "Deploying to Production Environment..."
#                 echo "Resource Group: $RG_NAME"
#                 echo "Container App: $APP_NAME"
#                 echo "Image: $IMAGE_NAME"
                
#                 # Create resource group if it doesn't exist
#                 az group create --name $RG_NAME --location "East US"
                
#                 # Create Container Apps environment with more production settings
#                 if ! az containerapp env show --name $ENV_NAME --resource-group $RG_NAME &> /dev/null; then
#                   echo "Creating Container Apps environment for production..."
#                   az containerapp env create \
#                     --name $ENV_NAME \
#                     --resource-group $RG_NAME \
#                     --location "East US"
#                 fi
                
#                 # Deploy or update the container app with production settings
#                 if az containerapp show --name $APP_NAME --resource-group $RG_NAME &> /dev/null; then
#                   echo "Updating existing production container app..."
#                   az containerapp update \
#                     --name $APP_NAME \
#                     --resource-group $RG_NAME \
#                     --image $IMAGE_NAME
#                 else
#                   echo "Creating new production container app..."
#                   az containerapp create \
#                     --name $APP_NAME \
#                     --resource-group $RG_NAME \
#                     --environment $ENV_NAME \
#                     --image $IMAGE_NAME \
#                     --target-port 8080 \
#                     --ingress external \
#                     --cpu 0.5 \
#                     --memory 1.0Gi \
#                     --min-replicas 2 \
#                     --max-replicas 10 \
#                     --env-vars "ENVIRONMENT=production" \
#                     --registry-server $(containerRegistry)
#                 fi
                
#                 # Get the application URL
#                 APP_URL=$(az containerapp show --name $APP_NAME --resource-group $RG_NAME --query "properties.configuration.ingress.fqdn" -o tsv)
#                 echo "##vso[task.setvariable variable=appUrl]https://$APP_URL"
#                 echo "Application deployed to production successfully!"
#                 echo "PROD URL: https://$APP_URL"
          
#           # Run smoke tests against production
#           - script: |
#               echo "Running production smoke tests..."
#               # Add your smoke tests here
#               # curl -f $(appUrl)/health || exit 1
#               echo "Smoke tests passed!"
#             displayName: 'Production Smoke Tests'

# ===== INFRASTRUCTURE AS CODE (OPTIONAL) =====
- stage: Infrastructure
  displayName: 'Infrastructure Setup'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')
  dependsOn: []  # Runs in parallel with Build
  jobs:
  - job: SetupInfrastructure
    displayName: 'Setup Azure Resources'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Setup Container Registry'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Create ACR if it doesn't exist
          REGISTRY_NAME=$(echo "$(containerRegistry)" | cut -d'.' -f1)
          
          if ! az acr show --name $REGISTRY_NAME &> /dev/null; then
            echo "Creating Azure Container Registry..."
            az acr create \
              --name $REGISTRY_NAME \
              --resource-group $(resourceGroupName)-shared \
              --sku Basic \
              --admin-enabled true
          fi
          
          echo "Container Registry is ready: $(containerRegistry)"