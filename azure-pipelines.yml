# azure-pipelines.yml
# Complete Azure DevOps CI/CD Pipeline for Java App with Terraform Infrastructure
# Single environment deployment using existing resource group

trigger:
  branches:
    include:
    - main

variables:
  # Maven and Java settings
  - name: mavenPomFile
    value: 'pom.xml'
  - name: javaVersion
    value: '11'
  
  # Azure Container Registry settings (will be populated by Terraform outputs)
  - name: imageRepository
    value: 'java-simple-app'
  - name: dockerfilePath
    value: 'Dockerfile'
  
  # Azure Resource settings
  - name: azureSubscription
    value: 'Azure-lhc-tests-serviceconnection'
  
  # Terraform settings
  - name: terraformVersion
    value: '1.5.7'
  - name: terraformWorkingDirectory
    value: '$(System.DefaultWorkingDirectory)/infrastructure'
  
  # Dynamic variables
  - name: imageTag
    value: '$(Build.BuildId)'

stages:
# ===== INFRASTRUCTURE SETUP STAGE =====
- stage: Infrastructure
  displayName: 'Setup Infrastructure with Terraform'
  jobs:
  - job: TerraformPlanAndApply
    displayName: 'Terraform Plan and Apply'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: AzureCLI@2
      displayName: 'Register Required Resource Providers'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Registering Required Azure Resource Providers ==="
          
          # Register Microsoft.App (Container Apps)
          echo "Registering Microsoft.App provider..."
          az provider register --namespace Microsoft.App
          
          # Register Microsoft.OperationalInsights (Log Analytics)
          echo "Registering Microsoft.OperationalInsights provider..."
          az provider register --namespace Microsoft.OperationalInsights
          
          # Wait for registration to complete
          echo "Waiting for Microsoft.App registration..."
          az provider show --namespace Microsoft.App --query "registrationState" -o tsv
          
          # Check registration status
          APP_STATUS=$(az provider show --namespace Microsoft.App --query "registrationState" -o tsv)
          LOGS_STATUS=$(az provider show --namespace Microsoft.OperationalInsights --query "registrationState" -o tsv)
          
          echo "Microsoft.App status: $APP_STATUS"
          echo "Microsoft.OperationalInsights status: $LOGS_STATUS"
          
          if [ "$APP_STATUS" != "Registered" ]; then
            echo "⏳ Waiting for Microsoft.App provider registration to complete..."
            while [ "$APP_STATUS" != "Registered" ]; do
              sleep 10
              APP_STATUS=$(az provider show --namespace Microsoft.App --query "registrationState" -o tsv)
              echo "Current status: $APP_STATUS"
            done
          fi
          
          echo "✅ All required resource providers are registered"

    - task: AzureCLI@2
      displayName: 'Terraform Init and Plan'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Terraform Infrastructure Planning ==="
          cd $(terraformWorkingDirectory)
          
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          
          # Validate Terraform configuration
          echo "Validating Terraform configuration..."
          terraform validate
          
          # Create Terraform plan
          echo "Creating Terraform plan..."
          terraform plan -out=tfplan -detailed-exitcode
          
          # Save plan status
          PLAN_EXIT_CODE=$?
          echo "##vso[task.setvariable variable=terraformPlanExitCode]$PLAN_EXIT_CODE"
          
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "❌ Terraform plan failed"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "✅ Terraform plan completed - changes detected"
          else
            echo "✅ Terraform plan completed - no changes needed"
          fi
    
    - task: AzureCLI@2
      displayName: 'Terraform Apply'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Terraform Infrastructure Deployment ==="
          cd $(terraformWorkingDirectory)
          
          # Apply Terraform plan
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
          
          # Get outputs and set pipeline variables
          echo "Getting Terraform outputs..."
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          ACR_NAME=$(terraform output -raw acr_name)
          
          echo "Setting pipeline variables..."
          echo "##vso[task.setvariable variable=containerRegistry;isOutput=true]$ACR_LOGIN_SERVER"
          echo "##vso[task.setvariable variable=acrName;isOutput=true]$ACR_NAME"
          echo "##vso[task.setvariable variable=imageName;isOutput=true]$ACR_LOGIN_SERVER/$(imageRepository):$(imageTag)"
          
          echo "=== Infrastructure Deployment Complete ==="
          echo "ACR Login Server: $ACR_LOGIN_SERVER"
          echo "ACR Name: $ACR_NAME"
      name: 'terraformOutputs'

# ===== BUILD AND TEST STAGE =====
- stage: Build
  displayName: 'Build, Test & Containerize'
  dependsOn: Infrastructure
  variables:
    - name: containerRegistry
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.containerRegistry'] ]
    - name: acrName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.acrName'] ]
    - name: imageName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.imageName'] ]
  jobs:
  - job: BuildTestAndPush
    displayName: 'Build Java App and Create Container'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    
    steps:
    # Checkout code
    - checkout: self
      displayName: 'Checkout Repository'
    
    # Set up Java
    - task: JavaToolInstaller@0
      displayName: 'Install Java $(javaVersion)'
      inputs:
        versionSpec: '$(javaVersion)'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
    
    # Cache Maven dependencies
    - task: Cache@2
      displayName: 'Cache Maven Dependencies'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
      env:
        MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
    
    # Maven: Clean, compile, test, package
    - task: Maven@3
      displayName: 'Maven: Clean Compile Test Package'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'clean compile test package'
        options: '-B -DskipTests=false'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
    
    # Build and push Docker image
    - task: AzureCLI@2
      displayName: 'Build and Push Docker Image'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Building and Pushing Docker Image ==="
          echo "ACR Name: $(acrName)"
          echo "Container Registry: $(containerRegistry)"
          echo "Image Name: $(imageName)"
          
          # Login to ACR
          az acr login --name $(acrName)
          
          # Build Docker image
          echo "Building Docker image: $(imageName)"
          docker build -t $(imageName) -f $(dockerfilePath) .
          
          # Tag with latest as well
          docker tag $(imageName) $(containerRegistry)/$(imageRepository):latest
          
          # Push both tags
          echo "Pushing Docker image to ACR..."
          docker push $(imageName)
          docker push $(containerRegistry)/$(imageRepository):latest
          
          echo "Docker image pushed successfully!"
          echo "Image: $(imageName)"

# ===== DEPLOY STAGE =====
- stage: Deploy
  displayName: 'Deploy Application'
  dependsOn: 
    - Build
  variables:
    - name: containerRegistry
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.containerRegistry'] ]
    - name: imageName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.imageName'] ]
  jobs:
  - deployment: DeployApp
    displayName: 'Deploy Application'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    environment: 'application'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Repository'
          
          - task: TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'
          
          - task: AzureCLI@2
            displayName: 'Update Container App Image'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "=== Updating Container App ==="
                cd infrastructure
                
                # Initialize Terraform
                terraform init
                
                # Update container app with new image
                terraform apply -auto-approve
                
                # Get the application URL
                APP_URL=$(terraform output -raw container_app_url)
                echo "##vso[task.setvariable variable=appUrl]$APP_URL"
                echo "=== Application Updated Successfully! ==="
                echo "Application URL: $APP_URL"

# ===== WAIT AND CLEANUP STAGE =====
- stage: WaitAndCleanup
  displayName: 'Wait 5 Minutes Then Cleanup Resources'
  dependsOn: 
    - Infrastructure
    - Build
    - Deploy
  jobs:
  - job: WaitAndCleanupAll
    displayName: 'Wait 5 Minutes Then Destroy'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - script: |
        echo "=== Waiting 5 minutes before cleanup ==="
        echo "This gives time to test the deployed application"
        echo "Start time: $(date)"
        
        # Wait for 5 minutes (300 seconds)
        sleep 300
        
        echo "Wait complete at: $(date)"
        echo "Proceeding to cleanup..."
      displayName: 'Wait 5 Minutes'

    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: AzureCLI@2
      displayName: 'Terraform Destroy All Resources'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== STARTING TERRAFORM DESTROY ==="
          echo "Cleanup started at: $(date)"
          cd infrastructure
          
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          
          # Show what will be destroyed
          echo "Planning destruction..."
          terraform plan -destroy -out=destroy.tfplan
          
          # Destroy all resources
          echo "Destroying all resources..."
          terraform apply -auto-approve destroy.tfplan
          
          echo "=== TERRAFORM DESTROY COMPLETE ==="
          echo "All resources have been destroyed successfully"
          echo "Cleanup completion time: $(date)"
          
          echo ""
          echo "=== SUMMARY ==="
          echo "✅ Infrastructure created and application deployed"
          echo "✅ Application ran for 5 minutes"
          echo "✅ All resources destroyed via Terraform"
          echo "💰 No ongoing Azure costs"
          echo ""
          echo "Resources destroyed:"
          echo "- Azure Container Registry and all images"
          echo "- Container App"
          echo "- Container App Environment" 
          echo "- Log Analytics Workspace"
          echo "- All associated networking and compute resources"
          echo ""
          echo "NOTE: The existing resource group '$(resource_group_name)' was preserved"