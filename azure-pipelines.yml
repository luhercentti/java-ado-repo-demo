# azure-pipelines.yml
# Fixed Azure DevOps CI/CD Pipeline for Java App with Terraform Infrastructure

trigger:
  branches:
    include:
    - main

variables:
  # Maven and Java settings
  - name: mavenPomFile
    value: 'pom.xml'
  - name: javaVersion
    value: '11'
  
  # Azure Container Registry settings
  - name: imageRepository
    value: 'java-simple-app'
  - name: dockerfilePath
    value: 'Dockerfile'
  
  # Azure Resource settings
  - name: azureSubscription
    value: 'Azure-lhc-tests-serviceconnection'
  
  # Terraform settings
  - name: terraformVersion
    value: '1.5.7'
  - name: terraformWorkingDirectory
    value: '$(System.DefaultWorkingDirectory)/infrastructure'
  
  # Dynamic variables
  - name: imageTag
    value: '$(Build.BuildId)'

stages:
# ===== INFRASTRUCTURE SETUP STAGE =====
- stage: Infrastructure
  displayName: 'Setup Complete Infrastructure with Terraform'
  jobs:
  - job: TerraformPlanAndApply
    displayName: 'Terraform Plan and Apply'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    steps:
    - checkout: self
      displayName: 'Checkout Repository'
    
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'
    
    - task: AzureCLI@2
      displayName: 'Register Required Resource Providers'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Registering Required Azure Resource Providers ==="
          
          # Register Microsoft.App (Container Apps)
          echo "Registering Microsoft.App provider..."
          az provider register --namespace Microsoft.App
          
          # Register Microsoft.OperationalInsights (Log Analytics)
          echo "Registering Microsoft.OperationalInsights provider..."
          az provider register --namespace Microsoft.OperationalInsights
          
          # Wait for registration to complete
          echo "Waiting for Microsoft.App registration..."
          APP_STATUS=$(az provider show --namespace Microsoft.App --query "registrationState" -o tsv)
          LOGS_STATUS=$(az provider show --namespace Microsoft.OperationalInsights --query "registrationState" -o tsv)
          
          echo "Microsoft.App status: $APP_STATUS"
          echo "Microsoft.OperationalInsights status: $LOGS_STATUS"
          
          if [ "$APP_STATUS" != "Registered" ]; then
            echo "⏳ Waiting for Microsoft.App provider registration to complete..."
            while [ "$APP_STATUS" != "Registered" ]; do
              sleep 10
              APP_STATUS=$(az provider show --namespace Microsoft.App --query "registrationState" -o tsv)
              echo "Current status: $APP_STATUS"
            done
          fi
          
          echo "✅ All required resource providers are registered"

    - task: AzureCLI@2
      displayName: 'Terraform Init, Plan and Apply'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Terraform Infrastructure Deployment ==="
          cd $(terraformWorkingDirectory)
          
          # Initialize Terraform
          echo "Initializing Terraform..."
          terraform init
          
          # Validate Terraform configuration
          echo "Validating Terraform configuration..."
          terraform validate
          
          # Create Terraform plan
          echo "Creating Terraform plan..."
          terraform plan -out=tfplan -detailed-exitcode
          
          # Save plan status
          PLAN_EXIT_CODE=$?
          echo "##vso[task.setvariable variable=terraformPlanExitCode]$PLAN_EXIT_CODE"
          
          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "❌ Terraform plan failed"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "✅ Terraform plan completed - changes detected"
          else
            echo "✅ Terraform plan completed - no changes needed"
          fi
          
          # Apply Terraform plan (creates everything including Container App with placeholder image)
          echo "Applying Terraform configuration..."
          terraform apply -auto-approve tfplan
          
          # Get outputs and set pipeline variables
          echo "Getting Terraform outputs..."
          ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
          ACR_NAME=$(terraform output -raw acr_name)
          CONTAINER_APP_NAME=$(terraform output -raw container_app_name)
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
          
          echo "Setting pipeline variables..."
          echo "##vso[task.setvariable variable=containerRegistry;isOutput=true]$ACR_LOGIN_SERVER"
          echo "##vso[task.setvariable variable=acrName;isOutput=true]$ACR_NAME"
          echo "##vso[task.setvariable variable=containerAppName;isOutput=true]$CONTAINER_APP_NAME"
          echo "##vso[task.setvariable variable=resourceGroupName;isOutput=true]$RESOURCE_GROUP_NAME"
          echo "##vso[task.setvariable variable=imageName;isOutput=true]$ACR_LOGIN_SERVER/$(imageRepository):$(imageTag)"
          
          echo "=== Infrastructure Deployment Complete ==="
          echo "ACR Login Server: $ACR_LOGIN_SERVER"
          echo "ACR Name: $ACR_NAME"
          echo "Container App: $CONTAINER_APP_NAME"
          echo "Resource Group: $RESOURCE_GROUP_NAME"
          echo "Container App is currently running with placeholder image"
      name: 'terraformOutputs'

# ===== BUILD AND TEST STAGE =====
- stage: Build
  displayName: 'Build, Test & Containerize'
  dependsOn: Infrastructure
  variables:
    - name: containerRegistry
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.containerRegistry'] ]
    - name: acrName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.acrName'] ]
    - name: imageName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.imageName'] ]
  jobs:
  - job: BuildTestAndPush
    displayName: 'Build Java App and Create Container'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    
    steps:
    # Checkout code
    - checkout: self
      displayName: 'Checkout Repository'
    
    # Set up Java
    - script: |
        echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-arm64"
        echo "##vso[task.prependpath]$JAVA_HOME/bin"
      displayName: 'Set Java 11 Path'
      
    # Verify Java version
    - script: java -version
      displayName: 'Check Java Version'
    
    # Cache Maven dependencies - FIXED
    - task: Cache@2
      displayName: 'Cache Maven Dependencies'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.m2/repository
    
    # Maven: Clean, compile, test, package - FIXED
    - task: Maven@4
      displayName: 'Maven: Clean Compile Test Package'
      inputs:
        mavenPomFile: '$(mavenPomFile)'
        goals: 'clean compile test package'
        options: '-B -DskipTests=false -Dmaven.repo.local=$(Pipeline.Workspace)/.m2/repository'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        checkStyleRunAnalysis: false
        pmdRunAnalysis: false
        findBugsRunAnalysis: false
        codeCoverageToolOption: 'JaCoCo'
        codeCoverageFailIfEmpty: false
      env:
        MAVEN_OPTS: '-Xmx3072m -XX:MaxPermSize=512m'
    
    # Debug: List target directory contents
    - script: |
        echo "=== Listing target directory contents ==="
        ls -la target/
        echo "=== Looking for JAR files ==="
        find target/ -name "*.jar" -type f
      displayName: 'Debug: List JAR files'
            
    # Build and push Docker image - IMPROVED ERROR HANDLING
    - task: AzureCLI@2
      displayName: 'Build and Push Docker Image'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "=== Building and Pushing Docker Image ==="
          echo "ACR Name: $(acrName)"
          echo "Container Registry: $(containerRegistry)"
          echo "Image Name: $(imageName)"
          
          # Check if JAR file exists before building
          echo "Checking for JAR files in target directory..."
          ls -la target/
          
          # Find the actual JAR file name
          JAR_FILE=$(find target/ -name "*.jar" -not -name "*sources.jar" -not -name "*javadoc.jar" | head -1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "❌ No JAR file found in target directory!"
            exit 1
          fi
          
          echo "Found JAR file: $JAR_FILE"
          
          # Login to ACR
          az acr login --name $(acrName)
          
          echo Enable Docker buildx for multi-platform builds
          sudo echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf > /dev/null
          docker buildx create --use >/dev/null 2>&1 || true

          # Build Docker image with build args
          echo "Building Docker image: $(imageName)"
          cat /etc/docker/daemon.json
          cat /etc/resolv.conf
          nslookup registry-1.docker.io
          docker buildx build \
            --platform linux/amd64 \
            --build-arg JAR_FILE=$(basename $JAR_FILE) \
            -t $(imageName) \
            -f $(dockerfilePath) \
            --load \
            .
          echo "Docker build completed successfully"

          # Verify image was built
          if ! docker images $(imageName) | grep -q "$(imageTag)"; then
            echo "❌ Docker image build failed!"
            exit 1
          fi
          
          # Tag with latest as well
          docker tag $(imageName) $(containerRegistry)/$(imageRepository):latest
          
          # Push both tags
          echo "Pushing Docker image to ACR..."
          docker push $(imageName)
          docker push $(containerRegistry)/$(imageRepository):latest
          
          echo "Docker image pushed successfully!"
          echo "Image: $(imageName)"

# ===== DEPLOY STAGE =====
- stage: Deploy
  displayName: 'Update Container App with Application Image'
  dependsOn: 
    - Infrastructure
    - Build
  variables:
    - name: containerRegistry
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.containerRegistry'] ]
    - name: imageName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.imageName'] ]
    - name: containerAppName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.containerAppName'] ]
    - name: resourceGroupName
      value: $[ stageDependencies.Infrastructure.TerraformPlanAndApply.outputs['terraformOutputs.resourceGroupName'] ]
  jobs:
  - deployment: UpdateApp
    displayName: 'Update Container App Image'
    pool:
      name: 'Default'
      demands:
      - agent.name -equals ubuntu
    environment: 'application'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            displayName: 'Checkout Repository'
          
          - task: AzureCLI@2
            displayName: 'Update Container App with Application Image'
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "=== Updating Container App with Application Image ==="
                echo "Container App: $(containerAppName)"
                echo "Resource Group: $(resourceGroupName)"
                echo "New Image: $(imageName)"
                
                # Update the Container App with the new image
                echo "Updating container app image..."
                az containerapp update \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --image $(imageName)
                
                # Wait a moment for the update to take effect
                echo "Waiting for update to complete..."
                sleep 30
                
                # Get the application URL
                echo "Getting application URL..."
                APP_URL=$(az containerapp show \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroupName) \
                  --query properties.configuration.ingress.fqdn \
                  --output tsv)
                
                if [ ! -z "$APP_URL" ]; then
                  APP_URL="https://$APP_URL"
                  echo "##vso[task.setvariable variable=appUrl]$APP_URL"
                  echo "=== Application Updated Successfully! ==="
                  echo "Application URL: $APP_URL"
                  
                  # Test the application
                  echo "Testing application..."
                  HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APP_URL || echo "000")
                  if [ "$HTTP_STATUS" = "200" ]; then
                    echo "✅ Application is responding successfully (HTTP $HTTP_STATUS)"
                  else
                    echo "⚠️  Application may not be ready yet (HTTP $HTTP_STATUS)"
                    echo "This is normal - Container Apps may take a few minutes to start"
                  fi
                else
                  echo "⚠️  Could not retrieve application URL"
                fi

# # ===== WAIT AND CLEANUP STAGE =====
# - stage: WaitAndCleanup
#   displayName: 'Wait 5 Minutes Then Cleanup Resources'
#   dependsOn: 
#     - Infrastructure
#     - Build
#     - Deploy
#   jobs:
#   - job: WaitAndCleanupAll
#     displayName: 'Wait 5 Minutes Then Destroy'
#     pool:
#       name: 'Default'
#       demands:
#       - agent.name -equals ubuntu
#     steps:
#     - checkout: self
#       displayName: 'Checkout Repository'
    
#     - script: |
#         echo "=== Waiting 5 minutes before cleanup ==="
#         echo "This gives time to test the deployed application"
#         echo "Start time: $(date)"
        
#         # Wait for 5 minutes (300 seconds)
#         sleep 300
        
#         echo "Wait complete at: $(date)"
#         echo "Proceeding to cleanup..."
#       displayName: 'Wait 5 Minutes'

#     - task: TerraformInstaller@0
#       displayName: 'Install Terraform'
#       inputs:
#         terraformVersion: '$(terraformVersion)'

#     - task: AzureCLI@2
#       displayName: 'Terraform Destroy All Resources'
#       inputs:
#         azureSubscription: '$(azureSubscription)'
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           echo "=== STARTING TERRAFORM DESTROY ==="
#           echo "Cleanup started at: $(date)"
#           cd infrastructure
          
#           # Initialize Terraform
#           echo "Initializing Terraform..."
#           terraform init
          
#           # Show what will be destroyed
#           echo "Planning destruction..."
#           terraform plan -destroy -out=destroy.tfplan
          
#           # Destroy all resources
#           echo "Destroying all resources..."
#           terraform apply -auto-approve destroy.tfplan
          
#           echo "=== TERRAFORM DESTROY COMPLETE ==="
#           echo "All resources have been destroyed successfully"
#           echo "Cleanup completion time: $(date)"
          
#           echo ""
#           echo "=== SUMMARY ==="
#           echo "✅ Infrastructure created with placeholder image"
#           echo "✅ Application built and pushed to ACR"
#           echo "✅ Container App updated with application image"
#           echo "✅ Application ran for 5 minutes"
#           echo "✅ All resources destroyed via Terraform"
#           echo "💰 No ongoing Azure costs"