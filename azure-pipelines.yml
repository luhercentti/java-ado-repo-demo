# azure-pipelines.yml
# Complete Azure DevOps CI/CD Pipeline for Java App with Terraform Infrastructure
# SOLUTION: Single job pipeline - no stages, no parallelism required

trigger:
  branches:
    include:
    - main

variables:
  # Maven and Java settings
  - name: mavenPomFile
    value: 'pom.xml'
  - name: javaVersion
    value: '11'
  
  # Azure Container Registry settings (will be populated by Terraform outputs)
  - name: imageRepository
    value: 'java-simple-app'
  - name: dockerfilePath
    value: 'Dockerfile'
  
  # Azure Resource settings
  - name: azureSubscription
    value: 'Azure-lhc-tests-serviceconnection'
  
  # Terraform settings
  - name: terraformVersion
    value: '1.5.7'
  - name: terraformWorkingDirectory
    value: '$(System.DefaultWorkingDirectory)/infrastructure'
  
  # Dynamic variables
  - name: imageTag
    value: '$(Build.BuildId)'

# Single job pipeline - no parallelism required
jobs:
- job: CompleteDeployment
  displayName: 'Complete CI/CD Deployment Pipeline'
  pool:
    vmImage: 'ubuntu-latest'
  
  steps:
  # ===== CHECKOUT =====
  - checkout: self
    displayName: 'Checkout Repository'
  
  # ===== INFRASTRUCTURE SETUP =====
  - task: TerraformInstaller@0
    displayName: 'üèóÔ∏è Install Terraform'
    inputs:
      terraformVersion: '$(terraformVersion)'
  
  # - task: AzureCLI@2
  #   displayName: 'üèóÔ∏è Terraform Init and Plan'
  #   inputs:
  #     azureSubscription: '$(azureSubscription)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       echo "=== Terraform Infrastructure Planning ==="
  #       cd $(terraformWorkingDirectory)
        
  #       # Initialize Terraform
  #       echo "Initializing Terraform..."
  #       terraform init
        
  #       # Validate Terraform configuration
  #       echo "Validating Terraform configuration..."
  #       terraform validate
        
  #       # Create Terraform plan
  #       echo "Creating Terraform plan..."
  #       terraform plan -out=tfplan -detailed-exitcode
        
  #       # Save plan status
  #       PLAN_EXIT_CODE=$?
  #       echo "##vso[task.setvariable variable=terraformPlanExitCode]$PLAN_EXIT_CODE"
        
  #       if [ $PLAN_EXIT_CODE -eq 1 ]; then
  #         echo "‚ùå Terraform plan failed"
  #         exit 1
  #       elif [ $PLAN_EXIT_CODE -eq 2 ]; then
  #         echo "‚úÖ Terraform plan completed - changes detected"
  #       else
  #         echo "‚úÖ Terraform plan completed - no changes needed"
  #       fi
  
  # - task: AzureCLI@2
  #   displayName: 'üèóÔ∏è Terraform Apply Infrastructure'
  #   inputs:
  #     azureSubscription: '$(azureSubscription)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       echo "=== Terraform Infrastructure Deployment ==="
  #       cd $(terraformWorkingDirectory)
        
  #       # Apply Terraform plan
  #       echo "Applying Terraform configuration..."
  #       terraform apply -auto-approve tfplan
        
  #       # Get outputs and set pipeline variables
  #       echo "Getting Terraform outputs..."
  #       ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)
  #       ACR_NAME=$(terraform output -raw acr_name)
        
  #       echo "Setting pipeline variables..."
  #       echo "##vso[task.setvariable variable=containerRegistry]$ACR_LOGIN_SERVER"
  #       echo "##vso[task.setvariable variable=acrName]$ACR_NAME"
  #       echo "##vso[task.setvariable variable=imageName]$ACR_LOGIN_SERVER/$(imageRepository):$(imageTag)"
        
  #       echo "=== Infrastructure Deployment Complete ==="
  #       echo "ACR Login Server: $ACR_LOGIN_SERVER"
  #       echo "ACR Name: $ACR_NAME"

  # # ===== JAVA BUILD AND TEST =====
  # - task: JavaToolInstaller@0
  #   displayName: '‚òï Install Java $(javaVersion)'
  #   inputs:
  #     versionSpec: '$(javaVersion)'
  #     jdkArchitectureOption: 'x64'
  #     jdkSourceOption: 'PreInstalled'
  
  # - task: Cache@2
  #   displayName: 'üì¶ Cache Maven Dependencies'
  #   inputs:
  #     key: 'maven | "$(Agent.OS)" | **/pom.xml'
  #     restoreKeys: |
  #       maven | "$(Agent.OS)"
  #     path: $(MAVEN_CACHE_FOLDER)
  #   env:
  #     MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  
  # - task: Maven@3
  #   displayName: 'üî® Maven: Clean Compile Test Package'
  #   inputs:
  #     mavenPomFile: '$(mavenPomFile)'
  #     goals: 'clean compile test package'
  #     options: '-B -DskipTests=false'
  #     publishJUnitResults: true
  #     testResultsFiles: '**/surefire-reports/TEST-*.xml'
  #     codeCoverageToolOption: 'JaCoCo'

  # # ===== DOCKER BUILD AND PUSH =====
  # - task: AzureCLI@2
  #   displayName: 'üê≥ Build and Push Docker Image'
  #   inputs:
  #     azureSubscription: '$(azureSubscription)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       echo "=== Building and Pushing Docker Image ==="
  #       echo "ACR Name: $(acrName)"
  #       echo "Container Registry: $(containerRegistry)"
  #       echo "Image Name: $(imageName)"
        
  #       # Login to ACR
  #       az acr login --name $(acrName)
        
  #       # Build Docker image
  #       echo "Building Docker image: $(imageName)"
  #       docker build -t $(imageName) -f $(dockerfilePath) .
        
  #       # Tag with latest as well
  #       docker tag $(imageName) $(containerRegistry)/$(imageRepository):latest
        
  #       # Push both tags
  #       echo "Pushing Docker image to ACR..."
  #       docker push $(imageName)
  #       docker push $(containerRegistry)/$(imageRepository):latest
        
  #       echo "Docker image pushed successfully!"
  #       echo "Image: $(imageName)"

  # # ===== DEPLOY TO DEVELOPMENT (conditional) =====
  # - task: AzureCLI@2
  #   displayName: 'üöÄ Deploy to Development Environment'
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  #   inputs:
  #     azureSubscription: '$(azureSubscription)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       echo "=== Updating Development Container App ==="
  #       cd infrastructure
        
  #       # Initialize Terraform (required for each step)
  #       terraform init
        
  #       # Update container app with new image
  #       terraform apply -auto-approve -var-file="dev.tfvars"
        
  #       # Get the application URL
  #       DEV_APP_URL=$(terraform output -raw dev_container_app_url)
  #       echo "##vso[task.setvariable variable=devAppUrl]$DEV_APP_URL"
  #       echo "=== Development Application Updated Successfully! ==="
  #       echo "DEV URL: $DEV_APP_URL"

  # # ===== DEPLOY TO PRODUCTION (conditional and commented) =====
  # # - task: AzureCLI@2
  # #   displayName: 'üöÄ Deploy to Production Environment'
  # #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  # #   inputs:
  # #     azureSubscription: '$(azureSubscription)'
  # #     scriptType: 'bash'
  # #     scriptLocation: 'inlineScript'
  # #     inlineScript: |
  # #       echo "=== Updating Production Container App ==="
  # #       cd infrastructure
        
  # #       # Initialize Terraform
  # #       terraform init
        
  # #       # Update container app with new image
  # #       terraform apply -auto-approve -var-file="prod.tfvars"
        
  # #       # Get the application URL
  # #       PROD_APP_URL=$(terraform output -raw prod_container_app_url)
  # #       echo "##vso[task.setvariable variable=prodAppUrl]$PROD_APP_URL"
  # #       echo "=== Production Application Updated Successfully! ==="
  # #       echo "PROD URL: $PROD_APP_URL"

  # # ===== WAIT PERIOD =====
  # - script: |
  #     echo "=== Waiting 5 minutes before cleanup ==="
  #     echo "This gives time to test the deployed applications"
  #     echo "Start time: $(date)"
      
  #     # Wait for 5 minutes (300 seconds)
  #     sleep 300
      
  #     echo "Wait complete at: $(date)"
  #     echo "Proceeding to cleanup..."
  #   displayName: '‚è∞ Wait 5 Minutes Before Cleanup'

  # # ===== CLEANUP RESOURCES =====
  # - task: AzureCLI@2
  #   displayName: 'üßπ Terraform Destroy All Resources'
  #   condition: always()  # Run cleanup even if previous steps fail
  #   inputs:
  #     azureSubscription: '$(azureSubscription)'
  #     scriptType: 'bash'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       echo "=== STARTING TERRAFORM DESTROY ==="
  #       echo "Cleanup started at: $(date)"
  #       cd infrastructure
        
  #       # Initialize Terraform
  #       echo "Initializing Terraform..."
  #       terraform init
        
  #       # Show what will be destroyed
  #       echo "Planning destruction..."
  #       terraform plan -destroy -out=destroy.tfplan
        
  #       # Destroy all resources
  #       echo "Destroying all resources..."
  #       terraform apply -auto-approve destroy.tfplan
        
  #       echo "=== TERRAFORM DESTROY COMPLETE ==="
  #       echo "All resources have been destroyed successfully"
  #       echo "Cleanup completion time: $(date)"
        
  #       echo ""
  #       echo "=== SUMMARY ==="
  #       echo "‚úÖ Infrastructure created and applications deployed"
  #       echo "‚úÖ Applications ran for 5 minutes"
  #       echo "‚úÖ All resources destroyed via Terraform"
  #       echo "üí∞ No ongoing Azure costs"
  #       echo ""
  #       echo "Resources destroyed:"
  #       echo "- Azure Container Registry and all images"
  #       echo "- Container Apps (dev and prod)"
  #       echo "- Container Apps Environments"
  #       echo "- Log Analytics Workspace"
  #       echo "- All Resource Groups"
  #       echo "- All associated networking and compute resources"